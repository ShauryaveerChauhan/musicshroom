// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  rooms         Room[]      @relation("UserRooms")
  roomMember    RoomUser[]  @relation("RoomMembers")      
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  role          Role        @default(EndUser)
  provider      String?
  streams       Stream[]
  upvotes       Upvote[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Stream {
  id          String     @id @default(uuid())
  streamId    String?
  title       String
  type        StreamType
  url         String
  extractedId String
  active      Boolean    @default(true)
  upvotes     Upvote[]
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  smallImg    String
  bigImg      String
  artist      String?
  album       String?
  durationMs  Int?
}

model Upvote {
  id       String @id @default(uuid())
  userId   String
  streamId String
  user     User   @relation(fields: [userId], references: [id])
  stream   Stream @relation(fields: [streamId], references: [id])

  @@unique([userId, streamId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Room {
  id        String     @id @default(uuid())
  code      String     @unique
  name      String
  hostId    String
  host      User       @relation("UserRooms", fields: [hostId], references: [id])
  members   RoomUser[] @relation("RoomUsers")
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model RoomUser {
  id        String   @id @default(uuid())
  userId    String
  roomId    String
  user      User     @relation("RoomMembers", fields: [userId], references: [id])
  room      Room     @relation("RoomUsers", fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roomId])
}

enum StreamType {
  Spotify
  YouTube
}

enum Provider {
  Google
}

enum Role {
  Streamer
  EndUser
}
